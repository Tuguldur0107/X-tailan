Тийм ээ, ойлгомжтой. Би developer.itc.gov.mn сайтад etax-тэй холбоотой ямар API-үүд байгаа, тэдгээрээр ямар өгөгдөл авах болон ямар төрлийн тайлан илгээх боломжтойг бүрэн судлаад хүргэж өгнө.


# Integrating with the E-Tax System (etax.mta.mn) via API

## Availability of E-Tax APIs for Filing and Data Access

**Yes – the Mongolian General Tax Authority provides official APIs** (documented on the ITC developer portal) for the e-Tax system. These web services allow external software to perform key actions that are normally done via the eTax web UI. According to the official integration guide, there are API endpoints for:

* **User Authentication** – obtaining an access token via the unified government login system (auth.itc.gov.mn). The eTax API uses an OpenID Connect realm on auth.itc.gov.mn for login/token issuance.
* **Retrieving Company/Taxpayer Info** – e.g. an endpoint to get the list of organizations (companies) associated with the logged-in user. The guide shows a `GET /api/user/getUserOrgs` endpoint (on the eTax API) which returns the taxpayer’s organization IDs and details. This is needed because one user may file on behalf of one or multiple entities.
* **Listing Required Tax Returns** – an API to fetch the list of tax reports that the taxpayer needs to file (e.g. which forms/periods are due). The documentation explicitly mentions a “тайлангийн жагсаалт авах сервис,” i.e. *service to retrieve the list of returns to be filed*. This helps an integrator know which tax forms (VAT, CIT, etc.) and periods are expected.
* **Submitting a Tax Return** – a “тайлан илгээх сервис” (report submission service) is provided for sending a completed tax return via API. In other words, a taxpayer’s accounting software can programmatically transmit a tax filing to eTax instead of using the web form. This includes the ability to submit returns with financial data or to submit an “X” (no-activity) report (discussed below).
* **Checking Submission Status** – there are mechanisms to check the status of a submitted return or to confirm whether a return was successfully filed. For example, after submission, one can query the status or see if the return appears as filed. The eTax API likely returns a status code or message in the submission response. Additionally, the “returns list” service can be used to verify if a particular period’s filing is still pending or has been accepted (it would disappear from the “due” list once filed). In short, an API consumer can retrieve the status of filings, either via a dedicated status endpoint or by checking the updated list of filings.

All these capabilities are documented on the ITC developer portal (developer.itc.gov.mn) under the eTax API section. The integration guide (“Цахим тайлангийн системийн вэб сервисийн холболтын мэдээлэл”) provides technical details for developers. In summary, the API covers login, fetching taxpayer info, retrieving required report list, submitting reports, and obtaining confirmation/status.

## How the E-Tax APIs Work (Authentication, Data Format, Responses)

Using the eTax APIs involves a sequence of calls and proper authentication. At a high level, a client application would perform the following steps to file a tax return via API:

1. **Authenticate via Unified Login:** Instead of the web login (which uses CAPTCHA, etc.), the API client obtains an access token from the **ITC centralized authentication system**. The Tax Authority’s systems use a Keycloak-based SSO at `auth.itc.gov.mn` (realm “ITC”). The developer documentation specifies a token URL (production: `https://auth.itc.gov.mn/auth/realms/ITC/...`) for getting an auth token. In practice, the client would likely use the OAuth2 *Resource Owner Password Credentials* grant or a similar flow by sending the taxpayer’s eTax username and password, along with a client ID. If successful, an **access token (JWT)** is returned. This token will be used in subsequent API calls (typically in the HTTP Authorization header as a Bearer token).

2. **Get Associated Organization ID:** Once authenticated, the client calls an endpoint to retrieve the taxpayer’s organization info. The eTax API provides `GET /api/user/getUserOrgs` which returns the list of organizations (companies or taxpayer accounts) the user has access to. Each entry includes an **entity ID (`ent_id`)** and other details. This `ent_id` is crucial – it is used to specify on whose behalf we are performing actions. According to the guide, when calling the report services, you must include this organization ID (ent\_id) in the requests. If the user only has one company, there will be one ID; if the user can file for multiple companies, you choose the relevant one.

3. **Retrieve Required Tax Return List:** (Optional but recommended) The client can fetch which tax forms and periods are due for filing for that entity. The API has a service for “татвар төлөгчийн тушаах тайлангийн жагсаалт авах” – i.e. get the list of returns the taxpayer needs to submit. This might be an endpoint like `GET /api/return/list` (exact path not confirmed, but described in the docs). The response would include entries for each required form (e.g. VAT for a certain month, CIT for a quarter, etc.), possibly with form codes and period identifiers. This lets the software know what needs filing and prevents duplicate submissions if something is already filed.

4. **Prepare Submission Data:** To submit a return, the client must construct the data payload required by the API. The exact format is defined in the API docs. Typically, it includes: the **form number** (an identifier for the tax form type), the tax period (year, month/quarter), the entity ID, and the financial data fields or attachments relevant to that form. If it’s an “X” (zero-activity) report, most financial fields would be zero or blank, and a special flag is used (see next section). The integration guide shows an example of the fields: e.g., a field for form number (`formNo`) which might be an integer code (e.g. “1100”), an **“activityType” or “activitiType”** field (likely indicating type of submission or workflow), a **resubmitId** (used if this is an amendment or resubmission of a previous report), etc.. The data is likely sent as JSON.

5. **Submit the Tax Return:** The client calls the **submission API endpoint** (e.g., `POST /api/return/submit` or similar) with the JSON payload and the authentication token. The documentation refers to this as the “тайлан илгээх сервис” (report submission service). In the request, one must include the `ent_id` (so the system knows which taxpayer entity is filing) – the guide notes that the previously obtained organization ID should be provided in the request parameters when calling the report submission service. The payload will also include the form-specific fields and the zero-report flag if applicable.

6. **Receive Response:** The API will respond with a result of the submission. If successful, it might return a status like “SUCCESS” or a transaction ID/confirmation number of the filed return. If there was an error, it will return an error code/message explaining the issue (for example, missing fields, or trying to file a form that’s already submitted). The integration is synchronous in the sense that you immediately know if the eTax system received the return successfully or not. (In some cases, the return might be accepted “conditionally” and later reviewed by a tax officer, but from the API perspective a successful call usually means the return is lodged in the system).

7. **Check Status (if needed):** In most cases, a successful submission means the return is filed. However, the question of “status” could refer to verifying that the return has been officially accepted or checking for processing by an inspector. The API does allow checking status. For instance, one could call the “returns list” service again – the filed return should no longer appear in the “due” list, confirming it’s filed. There may also be a dedicated endpoint to query a specific return’s status by ID. The developer documentation implies the ability to query status; for example, it mentions a **“status” field** in context (though details are sparse in our sources). In summary, the client can confirm filing either from the immediate response or by a follow-up API call.

**Data Formats and Authentication:** All API calls use JSON/HTTP and require the auth token in headers. The base URL for the eTax API in production is `https://etax.mta.mn/api/beta/` (there is also a test server at `http://st-etax.mta.mn/api/beta/` for development). Calls are made to various endpoints under this base. The unified authentication means you do not send the username/password to the eTax API directly; instead you exchange them for a token via the auth server, then use the token for eTax calls. This is more secure and aligns with modern API designs. Each request must include the token (e.g., `Authorization: Bearer <token>` header). If the token is missing or invalid/expired, the eTax API will refuse access – so managing token refresh (if the token has a short life) might be necessary, or using a refresh token if provided by Keycloak.

In terms of responses: For a successful data retrieval (like getUserOrgs or get return list), you’ll get a JSON array or object containing the requested info. For a submission, on success you might get a confirmation object (possibly including something like `{"status":"OK","message":"Successfully submitted","receiptId":12345}` or similar). On failure, you’d get an error structure; e.g., `{"status":"ERROR","errorCode": "...", "errorMessage": "Description of issue"}`. The integration guide likely enumerates possible error codes (for example, if the taxpayer’s session is unauthorized, if required fields are missing, etc.). One known error flag from other systems is `ETAX-API-...` codes, but those might be specific to e-Invoice; for eTax filing, errors would typically be logical (duplicate filing, late filing not allowed, etc.).

To summarize, the eTax API works by **mimicking the same operations the web interface does**, but through RESTful endpoints. You authenticate via the central SSO, get an org ID, then use the appropriate API calls to list and file returns, including passing all necessary data in JSON. The official documentation provides a detailed “service manual” to guide developers through these steps, and the existence of these APIs is confirmed by the tax authority’s developer site.

## Submitting an “X” (Zero-Income) Tax Return via API

An **“X report”** (“Х тайлан” in Mongolian) refers to a tax return that declares **no activity or income for the period** – essentially a zero-liability return. Many businesses must file such a report for periods in which they had no transactions. The eTax API supports submitting an X report, but **not through a separate dedicated endpoint**; rather, it is handled as a particular case of the general submission API. In other words, you use the same `submit return` service, with a flag or specific parameters indicating that the return has no data.

In the API’s data model, there is a field to mark a return as an “X” (no-income) report. The integration guide explicitly mentions this: *“явуулаагүй бол X тайлан илгээнэ. 0-үгүй, 1-тийм.”* – which translates to *“if \[no data is present], send an X report – 0 for no, 1 for yes.”* This implies there is a boolean parameter (likely sent in the JSON payload) that signals the system to treat the submission as a zero-activity return. Setting this flag to `1` (true) tells eTax that the taxpayer had no transactions in that period, and the system will accept it as an X report.

So, to send an X report via API, the sequence is: obtain token -> get ent\_id -> (optionally confirm the return is due) -> call the submit API with the form’s identifying info (form number, period) and **set the “no income” indicator to true**. You typically would not need to include any financial line items, since there are none – just the flag and maybe a minimal form structure. For example, if form “1100” corresponds to a particular tax form, you would include `"formNo":1100` and the X-report flag (`"isZeroReport":1` or analogous) in the JSON. The system then registers a zero-amount filing for that period.

If the API design follows the web, it might also require sending some nominal data fields even for zero returns (perhaps zeros in required numeric fields, etc.). But the crucial part is that flag. On the UI, an X report is usually done by clicking “Send zero report” without filling details; the API replicates this via the parameter.

**Is there a specialized shortcut endpoint for X reports?** It appears **no**, there isn’t a separate one-click API just for X reports – you still call the general report submission. The developer docs did not list a distinct “/submitZeroReport” endpoint or such; instead, you use the normal submission service with the appropriate flag. The concept of *“X тайлан илгээх”* is thus implemented as a subset of the standard API. This means if you plan to automate X filings for multiple forms, you have to do one call per form type per period, each with the X flag. The eTax system will record each as a filed return (with no financial data).

For completeness, note that you should ensure the form number and period you are submitting match the *due filings*. For example, if a company must file VAT monthly, you’d submit the VAT form for that month with zero values. If they must file corporate income tax quarterly, you’d submit the quarterly CIT form as X if applicable, etc. The earlier “list returns” API can help identify all the required filings (which would include those forms even if no data, marked as due). In a Facebook post by the tax authority, it’s explained that in the eTax dashboard, the list of required filings appears and you can choose one to send as X if no transactions. By analogy, the API expects you to pick those up and submit accordingly.

In summary, **yes, you can send an X (zero) report via the API**. There is a parameter in the submission payload to indicate a no-income return. There isn’t a separate API call just for X reports; you perform the normal `submit` call with that parameter turned on. The API will then register the return as filed with zero activity.

## Authentication Requirements and Authorization Structure

Using the eTax API **does require valid eTax user credentials** – you cannot send reports anonymously or with just a generic API key. The APIs are secured behind the same authentication that protects the eTax website. This means:

* **You need an eTax account** (username and password). Typically, for businesses, an accountant or responsible person’s account is associated with the company’s Taxpayer ID. The user must be registered in the unified login system and linked to the taxpayer (company) in eTax. For example, a company’s director or accountant might use their personal login which has access to that company on eTax. These are the credentials you will use to obtain the auth token via the API. If the account has two-factor authentication or other requirements, those need to be addressed (the API might require an OTP code if 2FA is enabled, though the documentation we saw did not mention OTP, so likely 2FA is not enforced for API or one must use an app password).

* **User Roles/Permissions:** The eTax system likely only allows filing if the user has the role of “taxpayer” or is authorized for that taxpayer. In practice, if you can file via the web with those credentials, you can do the same via API. There is no separate “API user role” for basic operations – the API is essentially acting on behalf of the logged-in user. So the permissions are the same as the web: e.g., a user who can file VAT for company X on the website can also file VAT for company X via the API with their token. The *authorization* to access specific data is enforced by the token and ent\_id – if you try to use an ent\_id that your user account isn’t allowed to access, the API will return an authorization error.

* **Developer/API Access Requirements:** While any valid user credentials can technically be used to get a token and call the API, in practice the Tax Authority may require software developers to register or obtain approval to use the APIs in production. The presence of a separate staging environment (`st-etax.mta.mn`) suggests a controlled approach where developers test their integrations before going live. It’s possible that an application might need a **client ID/secret** or some form of registration with ITC to use the auth server. However, from the information at hand, the client ID might be a public one (the web frontend uses something like `etax-gui` as client\_id). The documentation does not explicitly state that one must get a special API key – it seems they intended this to be used by third-party accounting software, so likely the workflow is: sign an agreement or get sandbox access, test your integration, then you can use live credentials. In one of the project documents, future plans included *“API consumer rights opening”*, hinting that enabling API access might involve some official enablement. This could mean the tax authority might have to approve or toggle API access for a taxpayer or a software provider. In absence of explicit info, one should assume **at least the user’s credentials and consent** are needed, and possibly coordinate with the tax authority for production usage.

* **Authorization Structure:** The unified login is based on Keycloak/OIDC, so the authorization structure is token-based. The token encapsulates the user’s identity and roles. When you present it to eTax API, the system knows who you are and what you can do. Each API request is authorized or denied based on that. There is no separate API permission for “sending returns” beyond what the user can normally do. So if the logged-in user is authorized to file a return on the web, their token will authorize the `submit` API. If not (say a user that only has read-access), then the API call would fail with a forbidden error.

In summary, **you **do**** need an eTax user’s credentials to use the API, and that user must have the rights to file for the target company. The API doesn’t magically bypass any permission checks – it uses the same rights as the web system. As a developer, you might use your clients’ accounts (with their permission) in your automation, or have each user provide credentials. There isn’t an open public dataset here; all actions are tied to authenticated users. If you plan a multi-user service (like X-SENDER for many companies), you’ll likely need to securely store each user’s eTax credentials (or tokens) to act on their behalf, much as you were doing with Puppeteer login.

One more note: the **unified login (Нэвтрэлтийн нэгдсэн систем)** is shared across eTax, eBarimt, etc. The official guide for SSO usage indicates that once a user is registered in SSO, they use those credentials for eTax. For API usage, this means if any special conditions like password expiry or CAPTCHA on first login exist, those have to be handled accordingly (the API token endpoint likely doesn’t require CAPTCHA, which is a big advantage over web scraping). The token endpoint will simply validate credentials and issue a token if correct.

## Developer Resources and Documentation

The General Authority for Taxation has provided resources for developers:

* **ITC Developer Portal:** The site developer.itc.gov.mn hosts API documentation for various government e-systems including e-Tax (Цахим татварын систем). The eTax API documentation can be accessed through this portal (which uses Stoplight for API docs). It contains the technical reference for each endpoint (methods, request/response schemas) and usage guidelines. For example, the “Introduction” section of the eTax API docs gives an overview of the system and references the 2019 update of eTax. The portal is the primary source of truth for available APIs.

* **PDF Integration Guide:** There is a PDF manual titled *“Цахим тайлангийн системийн вэбсервисийн холболтын мэдээлэл”* (Electronic Reporting System Web Service Connection Information). This appears to be a comprehensive guide (version 1.1 was referenced) that covers how to connect to the eTax web services. Snippets from this guide were used above – it details server URLs, authentication, and service endpoints (including the examples of fields for submission). This PDF is likely obtainable from ITC or the developer portal (possibly in a “User Manual” section). It’s an important document for any developer implementing the integration.

* **Example Implementations:** While not officially provided by GDT, some third-party developers or software companies have shared their experiences. For instance, an accounting software product brochure highlighted *“etax.mta.mn – API холболт”* as a feature, indicating it can save returns via API without manual input. This confirms that at least some companies have successfully integrated with eTax’s API. Additionally, community discussions (e.g., accountants’ groups on Facebook) mention the developer.itc.gov.mn resources and how to find taxpayer IDs or file zero reports via the system. While these are not official docs, they show that the developer community is aware of and using these APIs.

* **Related APIs (e.g. eBarimt):** It’s worth noting that the tax authority’s ITC portal also provides APIs for the VAT receipt system (eBarimt). For example, the “POS API 3.0” is documented for sending transaction data to the eBarimt system. The eTax API is separate, but the existence of eBarimt API since earlier might have set a precedent. Many developers are already familiar with eBarimt’s API (for integrating point-of-sale systems). The eTax API is conceptually similar in that it allows third-party software to communicate with the tax system electronically. So, in terms of ecosystem, there is a push towards allowing more **system-to-system tax data exchange**.

* **Support and Onboarding:** The developer portal likely provides contact info or a way to request API access. If integration issues arise (e.g., understanding certain fields or getting test credentials), ITC or the Tax Authority’s IT department would be the support channel. They might not offer an extensive sandbox publicly, but given the staging URL (st-etax), one can infer that developers get to test there. Documentation might also include sample requests (JSON payload examples for different forms) and explanation of field codes (for instance, form “1100” corresponds to a specific tax form – developers need to know which code is which form).

In summary, there are official docs and tools for developers: the Stoplight documentation site, PDF manuals, and presumably some test environment. Anyone attempting eTax integration should obtain these resources. Always ensure you are referring to the **latest version** of the API documentation, as tax forms and systems can update (the version we saw was 2019/2020 era; by 2025 there might be newer revisions or additional endpoints).

## Alternatives and Workarounds if Direct API Integration is Not Feasible

If for some reason full API integration is not possible or practical, a **hybrid approach combining API and automation** can be considered. There are a few scenarios where this might be the case: maybe the tax authority hasn’t granted you API access in production yet, or certain actions (like an edge case form or authentication hurdle) aren’t covered by the API. In such cases, you can use partial automation to fill the gaps:

* **Use API for Authentication, Automation for UI:** One major pain point with pure UI automation was handling login (CAPTCHA, etc.). By using the API token endpoint, you can bypass the CAPTCHA and log in programmatically, obtaining a session token. You could then launch a headless browser (Puppeteer) already authenticated. For example, after getting the JWT from auth.itc.gov.mn, you might simulate the web’s login by injecting the token or corresponding session cookies into the browser context. This could log the Puppeteer session into eTax without needing to visually solve CAPTCHA. Once logged in, you can use automation to navigate or click if needed. However, since the eTax web front-end likely calls the same backend APIs we discussed, a more efficient approach is to **avoid the UI entirely for filing** – instead, use the API for submission too. But if submission via API is the part that’s not allowed, you might flip the approach: use the API to log in and maybe fetch data (like list of required reports), but then use Puppeteer to actually fill out and submit the form on the website. This still reduces complexity (no manual data gathering, fewer chances of missing a required form) while ensuring the final step uses the official UI if the API route is blocked.

* **Use API for Data Retrieval (Status, Info):** Even if you continue using Puppeteer to send the form (click buttons, etc.), you can use APIs to double-check things. For instance, after an automated submission, query the API to confirm the return is marked as filed. Or use the API to retrieve the company’s registration info or tax ID if needed for your records. These read-only uses of the API could improve reliability (as scraping info from the UI is more error-prone than an API call).

* **Leverage Internal API Calls via Automation:** Another workaround is to mimic what the web application does internally. Modern web apps (possibly the eTax site included) use AJAX calls to submit forms. Using developer tools, one could observe these network calls when an X report is submitted on the web – likely it sends an HTTP request (perhaps to an endpoint similar to the documented API). Instead of automating clicks, your code could directly call those endpoints. This is essentially using the API without official documentation – but since we *have* documentation, it’s better to use it. Still, if official production API access is restricted, one could try to call the same endpoints as the web app uses (often they are identical to the public API). The risk is you need a valid session token and the endpoints might change, but it’s a fallback approach.

* **Combine with E-Barimt or Other Systems if Needed:** In some cases, a company might need to gather info from other systems (like invoice data from eBarimt or social insurance info) before filing. You can use the respective APIs (ebarimt API, etc.) to compile data, then either submit via eTax API or feed it into the Puppeteer-controlled web form. This isn’t directly about filing X reports (since no data), but for completeness, consider all available integration points to reduce manual work.

* **When API Integration is “not possible”:** If the tax authority outright does not permit API usage by your service (for example, if they restrict it to approved accounting software only), then unfortunately the only route is browser automation. In that case, a **robust Puppeteer setup** remains the solution. However, you can still apply improvements like scheduling, error-checking, and perhaps using image recognition or third-party captcha-solving services for the CAPTCHA. Ensure to keep the automation resilient to site changes (eTax might update its UI periodically). Monitor the developer portal as well – sometimes, authorities expand API access over time. If it’s a policy issue, engaging with the tax authority to become an approved developer might eventually allow you to use the APIs officially.

* **Security and Compliance:** A combined approach should also consider security. Storing user passwords (if not using API tokens exclusively) requires encryption and safe handling. If using both API and automation, maintain session security (e.g., do not expose the token or cookie unnecessarily). Also, ensure compliance with any terms-of-use – if the GDT forbids scraping, using the API where possible keeps you on a better footing. Conversely, if API use requires special permission, make sure you have that if you proceed.

**Recommendation:** The ideal scenario is to use the official APIs end-to-end: it’s more reliable and does exactly what the eTax system expects, with clear error messages and no need to simulate a browser. If that is achievable, it will streamline X report submissions greatly (no more dealing with headless browser quirks or CAPTCHA). If, however, you hit a roadblock (technical or bureaucratic), consider a hybrid: use the API for what it’s available (auth, data checks) and automation for the rest. This minimizes the surface where things can fail. For example, you might use the API to log in and to fetch the list of due reports each month; then your script knows “Company A needs to file form X and Y as zero.” If API filing is not allowed, the script could then drive the browser just to submit those two forms (with maybe pre-filled zero data). This is more efficient than scraping everything.

In conclusion, the eTax system **does have an API integration capability** for login, retrieving company info, fetching required filings, and submitting tax returns (including “X” zero-activity reports). The APIs use secure authentication and expect the same user authorization as the web system. To implement X-Sender with minimal friction, leveraging these APIs is highly recommended. Should full API usage not be possible, a combined approach (API + Puppeteer) can be used as a fallback to ensure reliable and automated tax filing for your users. Always refer to the official documentation and guidelines when integrating, and engage with the Tax Authority’s IT department if necessary to gain access to the sandbox or production API services.

**Sources:** The information above is based on the official developer documentation for the Mongolian e-Tax system, which describes the API endpoints and their usage, as well as insights from related resources and project documentation. These show how the eTax API can be used to log in through the unified authentication and programmatically submit tax returns, including zero-income reports, on behalf of a user.
